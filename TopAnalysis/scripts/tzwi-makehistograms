#!/usr/bin/env python

from ROOT import *
import yaml
import sys, os
from array import array

dataType = sys.argv[1]
configFile = sys.argv[2]

config = yaml.load(open(configFile))
steps = config['steps']
hists = config['hists']
weights0 = config['common'+dataType]['weights']
if len(weights0) == 0: weights0.append("1")

dName = sys.argv[3]
ofName = dName.replace('ntuple', 'hist').rstrip('/')+".root"
if os.path.exists(ofName): sys.exit(1)
odName = os.path.dirname(ofName)
if not os.path.exists(odName):
    try: os.makedirs(odName)
    except: pass

chain = TChain("Friends")
chain.Add(dName+"/*.root")
gROOT.SetBatch(True)

if 'NPROOF' in os.environ:
    nProc = os.environ['NPROOF']
    prf = TProof.Open("workers=%s" % nProc)
    chain.SetProof(True)

oFile = TFile(ofName, 'recreate')

hWCutFlow = TH1D("hWCutFlow", "Cut Flow;Step;Events", len(steps), 0, len(steps))
hNCutFlow = TH1D("hNCutFlow", "Cut Flow (noWeight);Step;Events (unweighted)", len(steps), 0, len(steps))

print "Processing", ofName

objs = []
for istep, step in enumerate(steps):

    hNCutFlow.GetXaxis().SetBinLabel(istep+1, step['name'])
    hWCutFlow.GetXaxis().SetBinLabel(istep+1, step['name'])

    weights = weights0[:]
    if 'weights' in step:
        weights = list(set(weights)|set(step['weight']))
    if 'weightsToDrop' in step:
        weights = list(set(weights)-set(step['weightToDrop']))
    weight = '*'.join(["(%s)" % x for x in weights])

    cuts = step['cuts']
    cut = '&&'.join(['(%s)' % x for x in cuts])

    oFile.cd()
    chain.Draw("(%d.0)>>hNCutFlow" % (istep), "(%s)" % (cut), "goff")
    chain.Draw("(%d.0)>>hWCutFlow" % (istep), "(%s)*(%s)" % (weight, cut), "goff")

    dout = oFile.mkdir(step['name'])
    dout.cd()

    if 'hists' not in step: continue
    for hname, hdef in [(x, hists[x]) for x in step['hists'] if x in hists]:
        h = None
        bins = hdef['bins']
        if type(bins) == list:
            if len(bins) == 2 and type(bins[0]) == list:
                h = TH2D('h'+hname, hdef['title'], len(bins[0])-1, array('d', bins[0]),
                                               len(bins[1])-1, array('d', bins[1]))
            else:
                h = TH1D('h'+hname, hdef['title'], len(bins)-1, array('d', bins))
        else:
            if 'nbinsY' in bins:
                h = TH2D('h'+hname, hdef['title'], bins['nbinsX'], bins['xmin'], bins['xmax'],
                                               bins['nbinsY'], bins['ymin'], bins['ymax'])
            else:
                h = TH1D('h'+hname, hdef['title'], bins['nbinsX'], bins['xmin'], bins['xmax'])
        #h.SetDirectory(dout)

        expr = hdef['expr'] if 'expr' in hdef else hname

        weights1 = weights
        if 'weight' in hdef:
            weights1 = list(set(weights)|set(hdef['weight']))
        if 'weightsToDrop' in hdef:
            weights1 = list(set(weights1)-set(hdef['weightsToDrop']))
        weight1 = '*'.join(['(%s)' % x for x in weights1])

        cuts1 = cuts[:]
        if 'cuts' in hdef:
            cuts1 = list(set(cuts)|set(hdef['cuts']))
        if 'cutsToDrop' in hdef:
            cuts1 = list(set(cuts)-set(hdef['cutsToDrop']))
        cut1 = '&&'.join(['(%s)' % x for x in cuts1])

        chain.Draw("%s>>h%s" % (expr, hname), "%s*(%s)" % (weight1, cut1), "goff")
        #chain.Draw("%s>>%s" % (expr, hname), "1*(%s)" % (weight1), "goff")

        h.Write()
        objs.append(h)
        #del h

oFile.cd()
hWCutFlow.Write()
hNCutFlow.Write()
oFile.Close()
